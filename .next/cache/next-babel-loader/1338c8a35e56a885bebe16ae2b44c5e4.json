{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\next-apollo\\\\pages\\\\Competitions\\\\CreateCompetition\\\\[createGenCompetId].js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport apolloClient from '../../../apollo/apolloClient';\nconst CREATE_GEN = gql`\nmutation CREATE_GEN($id: ID!,$type:String!,$gen:String){\n    createCompetition_gen(\n        id : $id,\n        type: $type,\n        gen: $gen\n  ){\n        type\n        gen \n        compet_id{\n        id\n        name\n        }\n  }\n}\n\n`;\n\nconst CreateGens = () => {\n  const route = useRouter();\n  const genY = [\"U9\", \"U11\", \"U13\", \"U15\", \"U17\"];\n  const genP = [\"N\", \"S+\", \"S-\", \"P-\", \"P+C\"];\n  const {\n    0: disableGenP,\n    1: setDisableGenP\n  } = useState(true);\n  const {\n    0: disableGenY,\n    1: setDisableGenY\n  } = useState(true);\n  useState({\n    id: route.query.createGenCompetId,\n    type: \"\",\n    gen: \"\"\n  });\n  const {\n    0: success,\n    1: setSuccess\n  } = useState(false);\n  const [createGen, {\n    error,\n    loading,\n    data\n  }] = useMutation(CREATE_GEN, {\n    variables: _objectSpread({}, genInfo),\n    onCompleted: data => {\n      if (data) {\n        setSuccess(true);\n\n        if (genInfo.type == \"ประชาชน\") {\n          genP.pop(genInfo.gen);\n        } else {\n          genY.pop(genInfo.gen);\n        }\n\n        useState({\n          type: \"\",\n          gen: \"\"\n        });\n      }\n    }\n  });\n\n  const handleSave = async e => {\n    try {\n      setGen(_objectSpread({}, genInfo, {\n        [e.target.name]: e.target.value\n      }));\n      e.preventDefault();\n      await createGen();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleChange = e => {\n    setGen(_objectSpread({}, genInfo, {\n      [e.target.name]: e.target.value\n    }));\n    console.log(genInfo);\n  };\n\n  const handleType = e => {\n    if (e.target.value == \"ประชาชน\") {\n      setDisableGenP(false);\n      setDisableGenY(true);\n    } else if (e.target.value == \"เยาวชน\") {\n      setDisableGenP(true);\n      setDisableGenY(false);\n    } else if (e.target.value == null) {\n      setDisableGenP(true);\n      setDisableGenY(true);\n    }\n\n    setGen(_objectSpread({}, genInfo, {\n      [e.target.name]: e.target.value\n    })); //console.log(genInfo);\n  };\n\n  const selectGen = () => {\n    if (disableGenP && disableGenY) {\n      return __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      }, \"\\u0E01\\u0E23\\u0E38\\u0E13\\u0E32\\u0E40\\u0E25\\u0E37\\u0E2D\\u0E01\\u0E1B\\u0E23\\u0E30\\u0E40\\u0E20\\u0E17\");\n    } else if (disableGenP == false && disableGenY == true) {\n      return __jsx(\"select\", {\n        name: \"gen\",\n        onChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      }, __jsx(\"option\", {\n        disabled: disableGenP,\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }\n      }, \"\\u0E40\\u0E25\\u0E37\\u0E2D\\u0E01\\u0E23\\u0E38\\u0E48\\u0E19\"), genP.map(prod => __jsx(\"option\", {\n        disabled: disableGenP,\n        value: prod,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }\n      }, prod)));\n    } else {\n      return __jsx(\"select\", {\n        name: \"gen\",\n        onChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }, __jsx(\"option\", {\n        disabled: disableGenP,\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }\n      }, \"\\u0E40\\u0E25\\u0E37\\u0E2D\\u0E01\\u0E23\\u0E38\\u0E48\\u0E19\"), genY.map(prod => __jsx(\"option\", {\n        disabled: disableGenY,\n        value: prod,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }\n      }, prod)));\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      margin: 80\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    hidden: true,\n    name: \"id\",\n    value: route.query.createGenCompetId,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }), __jsx(\"select\", {\n    name: \"type\",\n    onChange: handleType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, __jsx(\"option\", {\n    value: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }, \"\\u0E01\\u0E23\\u0E38\\u0E13\\u0E32\\u0E40\\u0E25\\u0E37\\u0E2D\\u0E01\"), __jsx(\"option\", {\n    value: \"\\u0E1B\\u0E23\\u0E30\\u0E0A\\u0E32\\u0E0A\\u0E19\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }, \"\\u0E1B\\u0E23\\u0E30\\u0E0A\\u0E32\\u0E0A\\u0E19\"), __jsx(\"option\", {\n    value: \"\\u0E40\\u0E22\\u0E32\\u0E27\\u0E0A\\u0E19\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, \"\\u0E40\\u0E22\\u0E32\\u0E27\\u0E0A\\u0E19\")), selectGen(), __jsx(\"button\", {\n    type: \"submit\",\n    style: {\n      margin: '5px',\n      padding: '18px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, \"\\u0E1A\\u0E31\\u0E19\\u0E17\\u0E36\\u0E01\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, success && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }\n  }, \"Success for Create Gen\")));\n};\n\nexport default apolloClient(CreateGens);","map":{"version":3,"sources":["D:/react/next-apollo/pages/Competitions/CreateCompetition/[createGenCompetId].js"],"names":["React","useState","useRouter","gql","useMutation","apolloClient","CREATE_GEN","CreateGens","route","genY","genP","disableGenP","setDisableGenP","disableGenY","setDisableGenY","id","query","createGenCompetId","type","gen","success","setSuccess","createGen","error","loading","data","variables","genInfo","onCompleted","pop","handleSave","e","setGen","target","name","value","preventDefault","console","log","handleChange","handleType","selectGen","map","prod","margin","padding"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport gql from 'graphql-tag'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport apolloClient from '../../../apollo/apolloClient'\r\n\r\nconst CREATE_GEN = gql`\r\nmutation CREATE_GEN($id: ID!,$type:String!,$gen:String){\r\n    createCompetition_gen(\r\n        id : $id,\r\n        type: $type,\r\n        gen: $gen\r\n  ){\r\n        type\r\n        gen \r\n        compet_id{\r\n        id\r\n        name\r\n        }\r\n  }\r\n}\r\n\r\n`\r\n\r\n\r\n\r\n\r\nconst CreateGens = () => {\r\n    const route = useRouter();\r\n    const genY = [\"U9\", \"U11\", \"U13\", \"U15\", \"U17\"];\r\n    const genP = [\"N\", \"S+\", \"S-\", \"P-\", \"P+C\"];\r\n    const [disableGenP, setDisableGenP] = useState(true)\r\n    const [disableGenY, setDisableGenY] = useState(true)\r\n    useState({\r\n        id: route.query.createGenCompetId,\r\n        type: \"\",\r\n        gen: \"\"\r\n    })\r\n    const [success, setSuccess] = useState(false)\r\n    const [createGen, { error, loading, data }] = useMutation(CREATE_GEN, {\r\n        variables: { ...genInfo },\r\n        onCompleted: data => {\r\n            if (data) {\r\n                setSuccess(true)\r\n                if (genInfo.type == \"ประชาชน\") {\r\n                    genP.pop(genInfo.gen)\r\n                }\r\n                else {\r\n                    genY.pop(genInfo.gen)\r\n                }\r\n                useState({\r\n                    type: \"\",\r\n                    gen: \"\"\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n    const handleSave = async e => {\r\n        try {\r\n            setGen({\r\n                ...genInfo,\r\n                [e.target.name]: e.target.value\r\n            })\r\n            e.preventDefault()\r\n            await createGen()\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleChange = e => {\r\n\r\n        setGen({\r\n            ...genInfo,\r\n            [e.target.name]: e.target.value\r\n        })\r\n        console.log(genInfo);\r\n    }\r\n\r\n    const handleType = e => {\r\n        if (e.target.value == \"ประชาชน\") {\r\n            setDisableGenP(false)\r\n            setDisableGenY(true)\r\n        }\r\n        else if (e.target.value == \"เยาวชน\") {\r\n            setDisableGenP(true)\r\n            setDisableGenY(false)\r\n        }\r\n        else if (e.target.value == null) {\r\n            setDisableGenP(true)\r\n            setDisableGenY(true)\r\n        }\r\n        setGen({\r\n            ...genInfo,\r\n            [e.target.name]: e.target.value\r\n        })\r\n        //console.log(genInfo);\r\n\r\n    }\r\n\r\n    const selectGen = () => {\r\n        if (disableGenP && disableGenY) {\r\n            return (<p>กรุณาเลือกประเภท</p>);\r\n        }\r\n        else if (disableGenP == false && disableGenY == true) {\r\n            return (\r\n                <select name=\"gen\" onChange={handleChange}>\r\n                    <option disabled={disableGenP} value={null}>เลือกรุ่น</option>\r\n                    {genP.map(prod => (\r\n                        <option disabled={disableGenP} value={prod}>{prod}</option>\r\n                    ))}\r\n                </select>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <select name=\"gen\" onChange={handleChange}>\r\n                    <option disabled={disableGenP} value={null}>เลือกรุ่น</option>\r\n                    {genY.map(prod => (\r\n                        <option disabled={disableGenY} value={prod}>{prod}</option>\r\n                    ))}\r\n                </select>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ margin: 80 }}>\r\n\r\n            <form onSubmit={handleSave}>\r\n                <input type=\"text\" hidden={true} name=\"id\" value={route.query.createGenCompetId} onChange={handleChange} />\r\n                <select name=\"type\" onChange={handleType}>\r\n                    <option value={null}>กรุณาเลือก</option>\r\n                    <option value=\"ประชาชน\">ประชาชน</option>\r\n                    <option value=\"เยาวชน\">เยาวชน</option>\r\n                </select>\r\n                {selectGen()}\r\n                <button type=\"submit\" style={{ margin: '5px', padding: '18px' }}>บันทึก</button>\r\n            </form>\r\n            <div>\r\n                {success && <p>Success for Create Gen</p>}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\nexport default apolloClient(CreateGens)\r\n"]},"metadata":{},"sourceType":"module"}