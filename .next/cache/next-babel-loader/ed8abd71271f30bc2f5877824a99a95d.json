{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\next-apollo\\\\pages\\\\Competitions\\\\[competitionId].js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport ScrollAnimation from 'react-animate-on-scroll';\nimport Link from 'next/link';\nimport gql from 'graphql-tag';\nimport apolloClient from '../../apollo/apolloClient';\nimport { useQuery } from '@apollo/react-hooks';\nconst QUERY_COMPETITION = gql`\n    query QUERY_COMPETITION($id: ID!){\n        competition(id: $id){\n            id\n            name\n            detail\n            place\n            price\n            compet_start\n            compet_end\n            start\n            end\n            pay_end\n            gens{\n                id\n                type\n                gen\n            }\n        }\n    }\n`;\n\nconst Competition = () => {\n  const types = new Array();\n  const date = new Date();\n  const route = useRouter();\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(QUERY_COMPETITION, {\n    variables: {\n      id: route.query.competitionId\n    }\n  });\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 23\n    }\n  }, \"Somethings went wrong,please try agein.\");\n  if (loading) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  }, \"loading....\");\n  data.competition.gens.map(dataGen => {\n    var temp = dataGen.type;\n\n    if (types.includes(temp) == false) {\n      types.push(temp);\n    }\n  });\n  return (// <div>\n    //     {route.query.competitionId}\n    // </div>\n    __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, __jsx(ScrollAnimation, {\n      animateIn: \"jackInTheBox\",\n      animateOut: \"fadeOut\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        margin: 80\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, __jsx(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, \"\\u0E01\\u0E32\\u0E23\\u0E41\\u0E02\\u0E48\\u0E07\\u0E02\\u0E31\\u0E19 Badminton\"), __jsx(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }, __jsx(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    }, data.competition.name), __jsx(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }, __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 29\n      }\n    }, types.map(type => __jsx(Row, {\n      className: \"text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 37\n      }\n    }, __jsx(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 41\n      }\n    }, type), __jsx(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 41\n      }\n    }, data.competition.gens.map(dataGen => {\n      if (dataGen.type == type) {\n        return __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 61\n          }\n        }, \" \", dataGen.gen, \" \");\n      }\n    })))), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }, __jsx(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 37\n      }\n    }, data.competition.detail, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 67\n      }\n    }))), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 33\n      }\n    }, __jsx(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 37\n      }\n    }, \"\\u0E04\\u0E48\\u0E32\\u0E2A\\u0E21\\u0E31\\u0E04\\u0E23 : \", data.competition.price, \" \\u0E1A\\u0E32\\u0E17\"), __jsx(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 37\n      }\n    }, \"\\u0E2A\\u0E16\\u0E32\\u0E19\\u0E17\\u0E35\\u0E48 : \", data.competition.place)), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 33\n      }\n    }, __jsx(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 37\n      }\n    }, \"\\u0E27\\u0E31\\u0E19\\u0E40\\u0E1B\\u0E34\\u0E14\\u0E23\\u0E31\\u0E1A\\u0E2A\\u0E21\\u0E31\\u0E04\\u0E23 : \", date.toISOString(data.competition.start).split(\"T\")[0]), __jsx(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 37\n      }\n    }, \"\\u0E27\\u0E31\\u0E19\\u0E2A\\u0E34\\u0E49\\u0E19\\u0E2A\\u0E38\\u0E14\\u0E23\\u0E31\\u0E1A\\u0E2A\\u0E21\\u0E31\\u0E04\\u0E23 : \", date.toISOString(data.competition.end).split(\"T\")[0])), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 33\n      }\n    }, __jsx(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 37\n      }\n    }, \"\\u0E27\\u0E31\\u0E19\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E01\\u0E32\\u0E23\\u0E41\\u0E02\\u0E48\\u0E07\\u0E02\\u0E31\\u0E19 : \", date.toISOString(data.competition.compet_start).split(\"T\")[0], \" \"), __jsx(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 37\n      }\n    }, \"\\u0E27\\u0E31\\u0E19\\u0E2A\\u0E34\\u0E49\\u0E19\\u0E2A\\u0E38\\u0E14\\u0E01\\u0E32\\u0E23\\u0E41\\u0E02\\u0E48\\u0E07\\u0E02\\u0E31\\u0E19 : \", date.toISOString(data.competition.compet_end).split(\"T\")[0])))), __jsx(Link, {\n      href: \"/Competitions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }, __jsx(\"a\", {\n      style: Detail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 29\n      }\n    }, \"\\u0E01\\u0E25\\u0E31\\u0E1A\"))), __jsx(Card.Footer, {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }, \"\\u0E08\\u0E48\\u0E32\\u0E22\\u0E04\\u0E48\\u0E32\\u0E2A\\u0E21\\u0E31\\u0E04\\u0E23\\u0E44\\u0E14\\u0E49\\u0E16\\u0E36\\u0E07 \", date.toISOString(data.competition.pay_end)))))\n  );\n};\n\nconst Detail = {\n  fontSize: 15\n};\nexport default apolloClient(Competition);","map":{"version":3,"sources":["D:/react/next-apollo/pages/Competitions/[competitionId].js"],"names":["React","useRouter","Container","Row","Col","Card","ScrollAnimation","Link","gql","apolloClient","useQuery","QUERY_COMPETITION","Competition","types","Array","date","Date","route","data","loading","error","variables","id","query","competitionId","competition","gens","map","dataGen","temp","type","includes","push","margin","name","gen","detail","price","place","toISOString","start","split","end","compet_start","compet_end","Detail","pay_end","fontSize"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,MAAMC,iBAAiB,GAAGH,GAAI;;;;;;;;;;;;;;;;;;;;CAA9B;;AAsBA,MAAMI,WAAW,GAAG,MAAM;AACtB,QAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACA,QAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,QAAMC,KAAK,GAAGhB,SAAS,EAAvB;AACA,QAAM;AAAEiB,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BV,QAAQ,CAACC,iBAAD,EAAoB;AACzDU,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAEL,KAAK,CAACM,KAAN,CAAYC;AAAlB;AAD8C,GAApB,CAAzC;AAGA,MAAIJ,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACbD,EAAAA,IAAI,CAACO,WAAL,CAAiBC,IAAjB,CAAsBC,GAAtB,CAA0BC,OAAO,IAAI;AACjC,QAAIC,IAAI,GAAGD,OAAO,CAACE,IAAnB;;AACA,QAAIjB,KAAK,CAACkB,QAAN,CAAeF,IAAf,KAAwB,KAA5B,EAAmC;AAC/BhB,MAAAA,KAAK,CAACmB,IAAN,CAAWH,IAAX;AACH;AACJ,GALD;AAQA,SACI;AACA;AACA;AACA,UAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,cAA3B;AACI,MAAA,UAAU,EAAC,SADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,MAAC,IAAD;AAAM,MAAA,SAAS,EAAC,aAAhB;AAA8B,MAAA,KAAK,EAAE;AAAEI,QAAAA,MAAM,EAAE;AAAV,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFADJ,EAEI,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaf,IAAI,CAACO,WAAL,CAAiBS,IAA9B,CADJ,EAEI,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKrB,KAAK,CAACc,GAAN,CAAUG,IAAI,IACX,MAAC,GAAD;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,IAAN,CADJ,EAEI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKZ,IAAI,CAACO,WAAL,CAAiBC,IAAjB,CAAsBC,GAAtB,CAA0BC,OAAO,IAAI;AAClC,UAAIA,OAAO,CAACE,IAAR,IAAgBA,IAApB,EAA0B;AACtB,eAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAOF,OAAO,CAACO,GAAf,MAAR;AACH;AACJ,KAJA,CADL,CAFJ,CADH,CADL,EAaI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMjB,IAAI,CAACO,WAAL,CAAiBW,MAAvB,EAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA9B,CADJ,CAbJ,EAgBI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAAiBlB,IAAI,CAACO,WAAL,CAAiBY,KAAlC,wBADJ,EAEI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAAgBnB,IAAI,CAACO,WAAL,CAAiBa,KAAjC,CAFJ,CAhBJ,EAoBI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wGAAwBvB,IAAI,CAACwB,WAAL,CAAiBrB,IAAI,CAACO,WAAL,CAAiBe,KAAlC,EAAyCC,KAAzC,CAA+C,GAA/C,EAAoD,CAApD,CAAxB,CADJ,EAEI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0HAA2B1B,IAAI,CAACwB,WAAL,CAAiBrB,IAAI,CAACO,WAAL,CAAiBiB,GAAlC,EAAuCD,KAAvC,CAA6C,GAA7C,EAAkD,CAAlD,CAA3B,CAFJ,CApBJ,EAwBI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0HAA2B1B,IAAI,CAACwB,WAAL,CAAiBrB,IAAI,CAACO,WAAL,CAAiBkB,YAAlC,EAAgDF,KAAhD,CAAsD,GAAtD,EAA2D,CAA3D,CAA3B,MADJ,EAEI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sIAA6B1B,IAAI,CAACwB,WAAL,CAAiBrB,IAAI,CAACO,WAAL,CAAiBmB,UAAlC,EAA8CH,KAA9C,CAAoD,GAApD,EAAyD,CAAzD,CAA7B,CAFJ,CAxBJ,CADJ,CAFJ,EAmCI,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,KAAK,EAAEI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,CAnCJ,CAFJ,EAyCI,MAAC,IAAD,CAAM,MAAN;AAAa,MAAA,SAAS,EAAC,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wHAAwD9B,IAAI,CAACwB,WAAL,CAAiBrB,IAAI,CAACO,WAAL,CAAiBqB,OAAlC,CAAxD,CAzCJ,CAFJ,CADJ;AAJJ;AAqDH,CAtED;;AAwEA,MAAMD,MAAM,GAAG;AACXE,EAAAA,QAAQ,EAAE;AADC,CAAf;AAIA,eAAetC,YAAY,CAACG,WAAD,CAA3B","sourcesContent":["import React from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ScrollAnimation from 'react-animate-on-scroll';\r\nimport Link from 'next/link'\r\nimport gql from 'graphql-tag'\r\nimport apolloClient from '../../apollo/apolloClient'\r\nimport { useQuery } from '@apollo/react-hooks'\r\n\r\nconst QUERY_COMPETITION = gql`\r\n    query QUERY_COMPETITION($id: ID!){\r\n        competition(id: $id){\r\n            id\r\n            name\r\n            detail\r\n            place\r\n            price\r\n            compet_start\r\n            compet_end\r\n            start\r\n            end\r\n            pay_end\r\n            gens{\r\n                id\r\n                type\r\n                gen\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Competition = () => {\r\n    const types = new Array;\r\n    const date = new Date()\r\n    const route = useRouter();\r\n    const { data, loading, error } = useQuery(QUERY_COMPETITION, {\r\n        variables: { id: route.query.competitionId }\r\n    })\r\n    if (error) return <div>Somethings went wrong,please try agein.</div>\r\n    if (loading) return <div>loading....</div>\r\n    data.competition.gens.map(dataGen => {\r\n        var temp = dataGen.type;\r\n        if (types.includes(temp) == false) {\r\n            types.push(temp);\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        // <div>\r\n        //     {route.query.competitionId}\r\n        // </div>\r\n        <Container>\r\n            <ScrollAnimation animateIn='jackInTheBox'\r\n                animateOut='fadeOut'>\r\n                <Card className=\"text-center\" style={{ margin: 80 }}>\r\n                    <Card.Header>การแข่งขัน Badminton</Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>{data.competition.name}</Card.Title>\r\n                        <Card.Text>\r\n                            <Container>\r\n                                {types.map(type => (\r\n                                    <Row className=\"text-left\">\r\n                                        <Col>{type}</Col>\r\n                                        <Col>\r\n                                            {data.competition.gens.map(dataGen => {\r\n                                                if (dataGen.type == type) {\r\n                                                    return (<div> {dataGen.gen} </div>)\r\n                                                }\r\n                                            })}\r\n                                        </Col>\r\n                                    </Row>\r\n                                ))}\r\n                                <Row>\r\n                                    <Col>{data.competition.detail}<br /></Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>ค่าสมัคร : {data.competition.price} บาท</Col>\r\n                                    <Col>สถานที่ : {data.competition.place}</Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>วันเปิดรับสมัคร : {date.toISOString(data.competition.start).split(\"T\")[0]}</Col>\r\n                                    <Col>วันสิ้นสุดรับสมัคร : {date.toISOString(data.competition.end).split(\"T\")[0]}</Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>วันเริ่มการแข่งขัน : {date.toISOString(data.competition.compet_start).split(\"T\")[0]} </Col>\r\n                                    <Col>วันสิ้นสุดการแข่งขัน : {date.toISOString(data.competition.compet_end).split(\"T\")[0]}</Col>\r\n                                </Row>\r\n\r\n                            </Container>\r\n                        </Card.Text>\r\n\r\n                        <Link href='/Competitions'>\r\n                            <a style={Detail}>กลับ</a>\r\n                        </Link>\r\n                    </Card.Body>\r\n                    <Card.Footer className=\"text-muted\">จ่ายค่าสมัครได้ถึง {date.toISOString(data.competition.pay_end)}</Card.Footer>\r\n                </Card>\r\n            </ScrollAnimation>\r\n        </Container >\r\n    )\r\n}\r\n\r\nconst Detail = {\r\n    fontSize: 15\r\n}\r\n\r\nexport default apolloClient(Competition)\r\n"]},"metadata":{},"sourceType":"module"}