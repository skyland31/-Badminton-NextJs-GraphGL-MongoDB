{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport fetch from 'isomorphic-unfetch';\nimport withApollo from 'next-with-apollo';\nvar uri = \"http://localhost:4444/graphql\";\nvar httpLink = createHttpLink({\n  uri: uri,\n  fetch: fetch\n});\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers;\n  //Get Token from localStorage\n  var token = JSON.parse(localStorage.getItem('jwt'));\n  return _objectSpread({}, headers, {\n    authorization: token ? \"Bearer \".concat(token) : ''\n  });\n});\nexport default withApollo(function (_ref2) {\n  var initialState = _ref2.initialState;\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n});","map":{"version":3,"sources":["D:/react/next-apollo/apollo/apolloClient.js"],"names":["ApolloClient","createHttpLink","setContext","InMemoryCache","fetch","withApollo","uri","httpLink","authLink","_","headers","token","JSON","parse","localStorage","getItem","authorization","initialState","link","concat","cache","restore"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,IAAMC,GAAG,GAAG,+BAAZ;AACA,IAAMC,QAAQ,GAAGN,cAAc,CAAC;AAAEK,EAAAA,GAAG,EAAHA,GAAF;AAAOF,EAAAA,KAAK,EAALA;AAAP,CAAD,CAA/B;AAEA,IAAMI,QAAQ,GAAGN,UAAU,CAAC,UAACO,CAAD,QAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC5C;AACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAX,CAAd;AAEA,2BACOL,OADP;AAEIM,IAAAA,aAAa,EAAEL,KAAK,oBAAaA,KAAb,IAAuB;AAF/C;AAIH,CAR0B,CAA3B;AAUA,eAAeN,UAAU,CAAC,iBAAsB;AAAA,MAAnBY,YAAmB,SAAnBA,YAAmB;AAC5C,SAAO,IAAIjB,YAAJ,CAAiB;AACpBkB,IAAAA,IAAI,EAAEV,QAAQ,CAACW,MAAT,CAAgBZ,QAAhB,CADc;AAEpBa,IAAAA,KAAK,EAAE,IAAIjB,aAAJ,GAAoBkB,OAApB,CAA4BJ,YAAY,IAAI,EAA5C;AAFa,GAAjB,CAAP;AAIH,CALwB,CAAzB","sourcesContent":["import { ApolloClient } from 'apollo-client'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { setContext } from 'apollo-link-context'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport withApollo from 'next-with-apollo'\r\n\r\nconst uri = \"http://localhost:4444/graphql\"\r\nconst httpLink = createHttpLink({ uri, fetch })\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n    //Get Token from localStorage\r\n    const token = JSON.parse(localStorage.getItem('jwt'))\r\n\r\n    return {\r\n        ...headers,\r\n        authorization: token ? `Bearer ${token}` : ''\r\n    }\r\n})\r\n\r\nexport default withApollo(({ initialState }) => {\r\n    return new ApolloClient({\r\n        link: authLink.concat(httpLink),\r\n        cache: new InMemoryCache().restore(initialState || {})\r\n    });\r\n});"]},"metadata":{},"sourceType":"module"}