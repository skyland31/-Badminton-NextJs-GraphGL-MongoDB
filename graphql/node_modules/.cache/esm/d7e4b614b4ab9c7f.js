let Competition,competitionGen,Mutation;_b4a‍.x([["default",()=>_b4a‍.o]]);_b4a‍.w("../models/competition",[["default",["Competition"],function(v){Competition=v}]]);_b4a‍.w("../models/competitionGen",[["default",["competitionGen"],function(v){competitionGen=v}]]);_b4a‍.w("./Mutation",[["default",["Mutation"],function(v){Mutation=v}]]);



const Query = {
    //me: (parent, args, context, info) => meLogin,
    competition: (parent, args, context, info) => Competition.findById(args.id).populate({ path: 'gens', populate: { path: 'compet_id' } }),
    competitions: (parent, args, context, info) => Competition.find().populate({ path: 'gens', populate: { path: 'compet_id' } }),
    competition_gen: (parent, args, context, info) => competitionGen.findById(args.id).populate({ path: 'compet_id', populate: { path: 'gens' } }),
    competition_gens: (parent, args, context, info) => competitionGen.find().populate({ path: 'compet_id', populate: { path: 'gens' } })

};

const resolvers = {
    Query,
    Mutation,
};
_b4a‍.d(resolvers);